{{- define "common_start" }}
#!/bin/bash

# set some env variables from the openstack env properly based on env
. /container.init/common.sh
chmod +x /container.init/*

# on Ubuntu, python does not recognize the system certificate bundle
export OS_CACERT=/etc/ssl/certs/ca-certificates.crt
export OS_AUTH_URL="{{.Values.keystone.api.endpoint.internal.protocol}}://{{.Values.keystone.api.endpoint.internal.host}}:{{.Values.keystone.api.endpoint.internal.port}}/v3"

# unset all proxy settings
unset HTTP_PROXY HTTPS_PROXY http_proxy https_proxy no_proxy all_proxy

# get K8S environment
export KUBE_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)
export KUBE_POD_NAME=$HOSTNAME
curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$KUBE_NAMESPACE/pods/$KUBE_POD_NAME > /pod.json
export KUBE_POD_UID=$(jq -r ".metadata.uid" < /pod.json)
export KUBE_NODE_IP=$(jq -r ".status.hostIP" < /pod.json)

# this only works for RCs
#export KUBE_RC_NAME=$(jq -r '.metadata.annotations["kubernetes.io/created-by"]' < /pod.json | jq -r '.reference|select(.kind="ReplicationController").name')
#curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$KUBE_NAMESPACE/replicationcontrollers/$KUBE_RC_NAME > /rc.json
#export KUBE_RC_UID=$(jq -r ".metadata.uid" < /rc.json)

# enable this once statsd is available locally
#export STATSD_HOST=$KUBE_NODE_IP
{{- end }}